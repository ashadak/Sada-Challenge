
# -*- coding: utf-8 -*-
"""highest_profit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DUTKS_v2Dp7_TULmIPam0RouenYT7dXh

# Challenge: Highest Profit
"""

## Import required libraries 
import pandas as pd
import numpy as np

"""# Part 1"""

## Read in data.csv file 
df = pd.read_csv('data.csv')

## Get the number of rows in the original dataframe
rows = len(df.index)

## Output 1: print the number of rows in original dataframe 
print('\n# of rows in original data: ',rows, '\n')

''' 
-Add a new column called "profits" to dataframe that converts the values in the "Profit (in millions)" column into numeric values using the to_numeric() function
-The errors argument turns any invalid values to NaN, meaning if there is a non-numeric value in the "Profit (in millions)" column that we attemp to convert into a numeric value,
it'll simply turn the non-numeric value into NaN
- The above steps were done because the "Profit (in millions)" column was of type object. Converting that values into numeric values (int/float) would facilitate sorting the values
downstream
'''

df["profits"] = pd.to_numeric(df["Profit (in millions)"], errors='coerce')

''' Drop all rows that have NaN in the "profits" column. Another advantage of performing the step above was so that we could utilize the dropna() 
funtion to remove the invalid rows '''

df_clean = df.dropna(subset=['profits'])

## Get the number of rows in the updated dataframe
rows_updated = len(df_clean.index)

## Output 2: print the number of rows in the updated dataframe 
print('# of rows in data after dropping all rows with invalid non-numeric profit column data: ', rows_updated, '\n')

"""## Part 2"""

## Convert our pandas dataframe to json format using the to_json() function and writing it out to a file called "data2.json"

df_clean.to_json('data2.json', orient='index')

## Sort the data in df_clean based on profit value

df_clean_sorted = df_clean.sort_values(by=['profits'], ascending=False)

## Get the top twenty rows with the highest profit values and assign the output to the variable "top_twenty"
top_twenty = df_clean_sorted.head(20)

## Output 3: Print the top twenty rows with the highest profit values
print('Top 20 rows with the highest profit values: \n' , top_twenty)